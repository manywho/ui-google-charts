!function(e){var t={};function o(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)o.d(n,a,function(t){return e[t]}.bind(null,a));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=4)}([function(e,t){e.exports=React},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var a=o(0),r=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.onChange=function(e){manywho.state.setComponent(t.props.id,{contentValue:e.target.value},t.props.flowKey,!0),t.forceUpdate()},t.onBlur=function(){manywho.component.handleEvent(t,manywho.model.getComponent(t.props.id,t.props.flowKey),t.props.flowKey)},t}return n(t,e),t.prototype.render=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey)||{},o=t&&void 0!==t.contentValue?t.contentValue:e.contentValue;return a.createElement("input",{type:"text",value:o,onChange:this.onChange,onBlur:this.onBlur})},t}(a.Component);manywho.component.register("custom-input",r),t.default=r},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var a=o(0);function r(e){return!0===e||!1===e?e:null!=e&&"true"===e.toLowerCase()}function s(e){var t="string";return null!=e&&(e=e.toUpperCase())===manywho.component.contentTypes.number&&(t="number"),t}var i=function(e){function t(t){var o=e.call(this,t)||this;return o.outcomes=null,o.outcomes=null,!1===googleChartsLoaded&&(google.charts.load("current",{packages:["corechart"]}),googleChartsLoaded=!0),o}return n(t,e),t.prototype.onSearchChanged=function(e){this.props.isDesignTime||(manywho.state.setComponent(this.props.id,{search:e.target.value},this.props.flowKey,!0),this.forceUpdate())},t.prototype.onSearchEnter=function(e){13!==e.keyCode||this.props.isDesignTime||(e.stopPropagation(),this.search())},t.prototype.renderRows=function(e,t,o){var n=manywho.model.getComponent(this.props.id,this.props.flowKey),i=(manywho.component.getByName("outcome"),this.props.id);return google.charts.setOnLoadCallback(function(){var t=new google.visualization.DataTable;if(null!=o&&o.length>0)for(var a=0;a<o.length;a++)t.addColumn(s(o[a].contentType),o[a].label);if(null!=e&&e.length>0){var l=[];for(a=0;a<e.length;a++)if(null!=e[a].properties&&e[a].properties.length>0&&null!=o&&o.length>0){for(var p=[],u=0;u<o.length;u++)for(var c=0;c<e[a].properties.length;c++)if(e[a].properties[c].typeElementPropertyId===o[u].typeElementPropertyId)if("number"===s(o[u].contentType)){var h=parseFloat(e[a].properties[c].contentValue);!0===isNaN(h)&&(h=0),p[p.length]=h}else p[p.length]=e[a].properties[c].contentValue;l[l.length]=p}t.addRows(l)}var m={width:"100%",height:"100%",pieHole:null,is3D:null},d=null;n.attributes&&(n.attributes.pieHole&&(m.pieHole=parseFloat(n.attributes.pieHole)),n.attributes.is3D&&(m.is3D=r(n.attributes.is3D)),n.attributes.chart&&("annotation"===n.attributes.chart.toLowerCase()?d=new google.visualization.AnnotationChart(document.getElementById(i)):"area"===n.attributes.chart.toLowerCase()?d=new google.visualization.AreaChart(document.getElementById(i)):"bar"===n.attributes.chart.toLowerCase()?d=new google.visualization.BarChart(document.getElementById(i)):"bubble"===n.attributes.chart.toLowerCase()?d=new google.visualization.BubbleChart(document.getElementById(i)):"calendar"===n.attributes.chart.toLowerCase()?d=new google.visualization.Calendar(document.getElementById(i)):"candlestick"===n.attributes.chart.toLowerCase()?d=new google.visualization.CandlestickChart(document.getElementById(i)):"column"===n.attributes.chart.toLowerCase()?d=new google.visualization.ColumnChart(document.getElementById(i)):"gauge"===n.attributes.chart.toLowerCase()?d=new google.visualization.Gauge(document.getElementById(i)):"line"===n.attributes.chart.toLowerCase()?d=new google.visualization.LineChart(document.getElementById(i)):"sankey"===n.attributes.chart.toLowerCase()?d=new google.visualization.Sankey(document.getElementById(i)):"treemap"===n.attributes.chart.toLowerCase()&&(d=new google.visualization.TreeMap(document.getElementById(i))))),null==d&&(d=new google.visualization.PieChart(document.getElementById(i))),d.draw(t,m)}),a.createElement("div",{id:this.props.id},null)},t.prototype.search=function(){if(!this.props.isDesignTime){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey);if(this.clearSelection(),e.objectDataRequest)manywho.engine.objectDataRequest(this.props.id,e.objectDataRequest,this.props.flowKey,manywho.settings.global("paging.table"),t.search,null,null,t.page);else{var o=(manywho.component.getDisplayColumns(e.columns)||[]).map(function(e){return e.typeElementPropertyId.toLowerCase()});this.setState({objectData:e.objectData.filter(function(e){return e.properties.filter(function(e){return-1!==o.indexOf(e.typeElementPropertyId)&&-1!==e.contentValue.toLowerCase().indexOf(t.search.toLowerCase())}).length>0})}),t.page=1,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0)}}},t.prototype.refresh=function(){this.props.isDesignTime||(manywho.state.setComponent(this.props.id,{search:""},this.props.flowKey,!0),this.search())},t.prototype.onRowClicked=function(e){var t=this.state.selectedRows,o=manywho.model.getComponent(this.props.id,this.props.flowKey);-1===t.indexOf(e.currentTarget.id)?o.isMultiSelect?t.push(e.currentTarget.id):t=[e.currentTarget.id]:t.splice(t.indexOf(e.currentTarget.id),1),this.setState({selectedRows:t}),manywho.state.setComponent(this.props.id,{objectData:manywho.component.getSelectedRows(o,t)},this.props.flowKey,!0)},t.prototype.clearSelection=function(){this.setState({selectedRows:[]}),manywho.state.setComponent(this.props.id,{objectData:[]},this.props.flowKey,!0)},t.prototype.onOutcome=function(e,t){var o=manywho.model.getComponent(this.props.id,this.props.flowKey);manywho.state.setComponent(o.id,{objectData:manywho.component.getSelectedRows(o,[e])},this.props.flowKey,!0);var n=this.props.flowKey,a=manywho.model.getOutcome(t,this.props.flowKey);manywho.engine.move(a,this.props.flowKey).then(function(){a.isOut&&manywho.engine.flowOut(a,n)})},t.prototype.onNext=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey);t.page||(t.page=1),t.page++,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0),e.objectDataRequest||e.fileDataRequest?this.search():e.attributes.pagination&&manywho.utils.isEqual(e.attributes.pagination,"true",!0)&&this.forceUpdate()},t.prototype.onPrev=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey);t.page--,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0),e.objectDataRequest||e.fileDataRequest?this.search():e.attributes.pagination&&manywho.utils.isEqual(e.attributes.pagination,"true",!0)&&this.forceUpdate()},t.prototype.getInitialState=function(){return{selectedRows:[],windowWidth:window.innerWidth,sortByOrder:"ASC",lastOrderBy:"",objectData:null}},t.prototype.componentDidMount=function(){},t.prototype.componentWillMount=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey);e.objectDataRequest||this.setState({objectData:e.objectData})},t.prototype.componentWillReceiveProps=function(e){var t=manywho.model.getComponent(e.id,e.flowKey),o=this.props.isDesignTime?{error:null,loading:!1}:manywho.state.getComponent(this.props.id,this.props.flowKey)||{};t.objectDataRequest||t.fileDataRequest||!manywho.utils.isNullOrWhitespace(o.search)||!manywho.utils.isNullOrWhitespace(o.page)&&1!==o.page||this.setState({objectData:t.objectData})},t.prototype.render=function(){manywho.log.info("Rendering Google Chart: "+this.props.id);var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=this.props.isDesignTime?{error:null,loading:!1}:manywho.state.getComponent(this.props.id,this.props.flowKey)||{};this.outcomes=manywho.model.getOutcomes(this.props.id,this.props.flowKey);var o=this.props.isDesignTime?[]:e.objectData;e.objectData&&t.objectData&&!this.state.objectData&&(o=e.objectData.map(function(e){var o=t.objectData.filter(function(t){return manywho.utils.isEqual(e.externalId,t.externalId)&&manywho.utils.isEqual(e.internalId,t.internalId)})[0];return o?manywho.utils.extend({},[e,o]):e}));var n=this.props.isDesignTime?[]:function(e,t){var o=manywho.component.getDisplayColumns(e)||[];return t.filter(function(e){return!e.isBulkAction}).length>0&&o.unshift("mw-outcomes"),o}(e.columns,this.outcomes),s=e.objectDataRequest&&e.objectDataRequest.hasMoreResults||e.fileDataRequest&&e.fileDataRequest.hasMoreResults,i=null,l=this.outcomes.filter(function(e){return!e.isBulkAction}),p=this.outcomes.filter(function(e){return e.isBulkAction});this.state.objectData&&(o=this.state.objectData),i=t.error?a.createElement("div",{className:"table-error"},[a.createElement("p",{className:"lead"},t.error.message),a.createElement("button",{className:"btn btn-danger",onClick:this.search},"Retry")]):0===n.length?a.createElement("div",{className:"table-error"},a.createElement("p",{className:"lead"},"No display columns have been defined for this table")):this.renderRows(o||[],l,n);var u=[],c="";!1===e.isVisible&&u.push("hidden"),u=u.concat(manywho.styling.getClasses(this.props.parentId,this.props.id,"google-chart",this.props.flowKey)),c=e.attributes&&e.attributes.classes?u.join(" ")+" "+e.attributes.classes:u.join(" ");var h=null;return void 0!==e.isValid&&!1===e.isValid&&(h=a.createElement("div",{className:"has-error"},a.createElement("span",{className:"help-block"},e.validationMessage))),!1===e.isVisible&&(c+=" hidden"),a.createElement("div",{className:c},[a.createElement("div",{className:"panel panel-default"},[a.createElement("div",{className:"panel-heading"},e.label),a.createElement("div",{className:"panel-body"},[h,a.createElement("div",null,[function(e,t,o,n,s,i,l,p,u,c,h){var m=manywho.utils.getLookUpKey(o),d=[],y=null,f=null,g=null,w=document.getElementById(m);if(p&&null!=h.attributes&&!0===r(h.attributes.enableRefresh)||p&&null==h.attributes){var b={className:"btn btn-sm btn-default table-refresh",onClick:u,disabled:!1};c&&(b.disabled=!0),g=a.createElement("button",b,a.createElement("span",{className:"glyphicon glyphicon-refresh"},null))}if(n){var v={className:"btn btn-default",onClick:l,disabled:!1};c&&(v.disabled=!0),y=a.createElement("div",{className:"input-group table-search"},[a.createElement("input",{type:"text",className:"form-control",value:e,placeholder:"Search",onChange:s,onKeyUp:i}),a.createElement("span",{className:"input-group-btn"},a.createElement("button",v,a.createElement("span",{className:"glyphicon glyphicon-search"},null)))])}return t&&(f=a.createElement("div",{className:"table-outcomes"},t.map(function(e){return a.createElement(manywho.component.getByName("outcome"),{id:e.id,flowKey:o})}))),(d=w&&w.clientWidth<768?[f,y,g]:[g,y,f]).length>0?a.createElement("div",{className:"table-header clearfix"},d):null}(t.search,p,this.props.flowKey,e.isSearchable,this.onSearchChanged,this.onSearchEnter,this.search,e.objectDataRequest||e.fileDataRequest,this.refresh,this.props.isDesignTime,e),i,function(e,t,o,n,r){var s=[];return(e>1||t)&&s.push(a.createElement(manywho.component.getByName("pagination"),{pageIndex:e,hasMoreResults:t,containerClasses:"pull-right",onNext:o,onPrev:n,isDesignTime:r})),s.length>0?a.createElement("div",{className:"table-footer clearfix"},s):null}(t.page||1,s,this.onNext,this.onPrev,this.props.isDesignTime),a.createElement(manywho.component.getByName("wait"),{isVisible:t.loading,message:t.loading&&t.loading.message,isSmall:!0},null)])])])])},t}(a.Component);manywho.component.register("google-chart",i),t.default=i},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var a=o(0);o(9);var r=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.render=function(){return a.createElement("div",{className:"custom-basic"},"Basic Custom Component")},t}(a.Component);manywho.component.register("custom-basic",r),t.default=r},function(e,t,o){"use strict";function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0}),n(o(3)),n(o(2)),n(o(1))},,,,,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9zcmMvaW5wdXQudHN4Iiwid2VicGFjazovLy8uL3NyYy9nb29nbGUtY2hhcnQudHN4Iiwid2VicGFjazovLy8uL3NyYy9iYXNpYy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJlYWN0IiwiQ3VzdG9tSW5wdXQiLCJfc3VwZXIiLCJfdGhpcyIsImFwcGx5IiwidGhpcyIsImFyZ3VtZW50cyIsIm9uQ2hhbmdlIiwiZSIsIm1hbnl3aG8iLCJzdGF0ZSIsInNldENvbXBvbmVudCIsInByb3BzIiwiaWQiLCJjb250ZW50VmFsdWUiLCJ0YXJnZXQiLCJmbG93S2V5IiwiZm9yY2VVcGRhdGUiLCJvbkJsdXIiLCJjb21wb25lbnQiLCJoYW5kbGVFdmVudCIsIm1vZGVsIiwiZ2V0Q29tcG9uZW50IiwiX19leHRlbmRzIiwicmVuZGVyIiwidW5kZWZpbmVkIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJDb21wb25lbnQiLCJyZWdpc3RlciIsImRlZmF1bHQiLCJwYXJzZUJvb2xlYW4iLCJ0b0xvd2VyQ2FzZSIsImNvbnZlcnRUb0dvb2dsZVR5cGUiLCJjb250ZW50VHlwZSIsImdvb2dsZVR5cGUiLCJ0b1VwcGVyQ2FzZSIsImNvbnRlbnRUeXBlcyIsIm51bWJlciIsIkdvb2dsZUNoYXJ0Iiwib3V0Y29tZXMiLCJnb29nbGVDaGFydHNMb2FkZWQiLCJnb29nbGUiLCJjaGFydHMiLCJsb2FkIiwicGFja2FnZXMiLCJvblNlYXJjaENoYW5nZWQiLCJpc0Rlc2lnblRpbWUiLCJzZWFyY2giLCJvblNlYXJjaEVudGVyIiwia2V5Q29kZSIsInN0b3BQcm9wYWdhdGlvbiIsInJlbmRlclJvd3MiLCJvYmplY3REYXRhIiwiZGlzcGxheUNvbHVtbnMiLCJjaGFydElkIiwiZ2V0QnlOYW1lIiwic2V0T25Mb2FkQ2FsbGJhY2siLCJkYXRhIiwidmlzdWFsaXphdGlvbiIsIkRhdGFUYWJsZSIsImxlbmd0aCIsImFkZENvbHVtbiIsImxhYmVsIiwicm93cyIsInByb3BlcnRpZXMiLCJyb3ciLCJrIiwiaiIsInR5cGVFbGVtZW50UHJvcGVydHlJZCIsIm51bWJlclZhbHVlIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiYWRkUm93cyIsIm9wdGlvbnMiLCJ3aWR0aCIsImhlaWdodCIsInBpZUhvbGUiLCJpczNEIiwiY2hhcnQiLCJhdHRyaWJ1dGVzIiwiQW5ub3RhdGlvbkNoYXJ0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIkFyZWFDaGFydCIsIkJhckNoYXJ0IiwiQnViYmxlQ2hhcnQiLCJDYWxlbmRhciIsIkNhbmRsZXN0aWNrQ2hhcnQiLCJDb2x1bW5DaGFydCIsIkdhdWdlIiwiTGluZUNoYXJ0IiwiU2Fua2V5IiwiVHJlZU1hcCIsIlBpZUNoYXJ0IiwiZHJhdyIsImNsZWFyU2VsZWN0aW9uIiwib2JqZWN0RGF0YVJlcXVlc3QiLCJlbmdpbmUiLCJzZXR0aW5ncyIsImdsb2JhbCIsInBhZ2UiLCJkaXNwbGF5Q29sdW1uc18xIiwiZ2V0RGlzcGxheUNvbHVtbnMiLCJjb2x1bW5zIiwibWFwIiwiY29sdW1uIiwic2V0U3RhdGUiLCJmaWx0ZXIiLCJpbmRleE9mIiwicmVmcmVzaCIsIm9uUm93Q2xpY2tlZCIsInNlbGVjdGVkUm93cyIsImN1cnJlbnRUYXJnZXQiLCJpc011bHRpU2VsZWN0IiwicHVzaCIsInNwbGljZSIsImdldFNlbGVjdGVkUm93cyIsIm9uT3V0Y29tZSIsIm9iamVjdERhdGFJZCIsIm91dGNvbWVJZCIsIm91dGNvbWUiLCJnZXRPdXRjb21lIiwibW92ZSIsInRoZW4iLCJpc091dCIsImZsb3dPdXQiLCJvbk5leHQiLCJmaWxlRGF0YVJlcXVlc3QiLCJwYWdpbmF0aW9uIiwidXRpbHMiLCJpc0VxdWFsIiwib25QcmV2IiwiZ2V0SW5pdGlhbFN0YXRlIiwid2luZG93V2lkdGgiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwic29ydEJ5T3JkZXIiLCJsYXN0T3JkZXJCeSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImVycm9yIiwibG9hZGluZyIsImlzTnVsbE9yV2hpdGVzcGFjZSIsImxvZyIsImluZm8iLCJnZXRPdXRjb21lcyIsIm1vZGVsSXRlbSIsInN0YXRlT2JqZWN0RGF0YSIsInN0YXRlSXRlbSIsImV4dGVybmFsSWQiLCJpbnRlcm5hbElkIiwiZXh0ZW5kIiwiaXNCdWxrQWN0aW9uIiwidW5zaGlmdCIsImhhc01vcmVSZXN1bHRzIiwiY29udGVudCIsInJvd091dGNvbWVzIiwiaGVhZGVyT3V0Y29tZXMiLCJjbGFzc05hbWUiLCJtZXNzYWdlIiwib25DbGljayIsImNzc0NsYXNzZXMiLCJjbGFzc05hbWVzIiwiaXNWaXNpYmxlIiwiY29uY2F0Iiwic3R5bGluZyIsImdldENsYXNzZXMiLCJwYXJlbnRJZCIsImNsYXNzZXMiLCJqb2luIiwidmFsaWRhdGlvbkVsZW1lbnQiLCJpc1ZhbGlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJzZWFyY2hWYWx1ZSIsImlzU2VhcmNoRW5hYmxlZCIsIm9uU2VhcmNoRW50ZXJlZCIsImlzT2JqZWN0RGF0YSIsImxvb2tVcEtleSIsImdldExvb2tVcEtleSIsImhlYWRlckVsZW1lbnRzIiwic2VhcmNoRWxlbWVudCIsIm91dGNvbWVzRWxlbWVudCIsInJlZnJlc2hFbGVtZW50IiwibWFpbkVsZW1lbnQiLCJlbmFibGVSZWZyZXNoIiwicmVmcmVzaEF0dHJpYnV0ZXMiLCJkaXNhYmxlZCIsImJ1dHRvbkF0dHJpYnV0ZXMiLCJwbGFjZWhvbGRlciIsIm9uS2V5VXAiLCJjbGllbnRXaWR0aCIsInJlbmRlckhlYWRlciIsImlzU2VhcmNoYWJsZSIsInBhZ2VJbmRleCIsImZvb3RlckVsZW1lbnRzIiwiY29udGFpbmVyQ2xhc3NlcyIsInJlbmRlckZvb3RlciIsImlzU21hbGwiLCJDdXN0b21CYXNpYyIsIl9fZXhwb3J0Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIs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QUEsSUFDQThPLEVBQUE5TyxFQUFBLElBQ0E4TyxFQUFBOU8sRUFBQSIsImZpbGUiOiJjdXN0b20tY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJkZWNsYXJlIHZhciBtYW55d2hvOiBhbnk7XHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5jbGFzcyBDdXN0b21JbnB1dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4ge1xyXG5cclxuICAgIG9uQ2hhbmdlID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcbiAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQoXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaWQsXHJcbiAgICAgICAgICAgIHsgY29udGVudFZhbHVlOiBlLnRhcmdldC52YWx1ZSB9LFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmZsb3dLZXksXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25CbHVyID0gKCkgPT4ge1xyXG4gICAgICAgIG1hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KFxyXG4gICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudChcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaWQsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmZsb3dLZXksXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZmxvd0tleSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBtb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHRoaXMucHJvcHMuZmxvd0tleSk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpIHx8IHt9O1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZW50VmFsdWUgPVxyXG4gICAgICAgICAgICBzdGF0ZSAmJiBzdGF0ZS5jb250ZW50VmFsdWUgIT09IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgIHN0YXRlLmNvbnRlbnRWYWx1ZSA6XHJcbiAgICAgICAgICAgIG1vZGVsLmNvbnRlbnRWYWx1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPXtjb250ZW50VmFsdWV9IG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfSBvbkJsdXI9e3RoaXMub25CbHVyfSAvPjtcclxuICAgIH1cclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ2N1c3RvbS1pbnB1dCcsIEN1c3RvbUlucHV0KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUlucHV0O1xyXG4iLCJkZWNsYXJlIHZhciBtYW55d2hvOiBhbnk7XHJcbmRlY2xhcmUgdmFyIGdvb2dsZTogYW55O1xyXG5kZWNsYXJlIHZhciBnb29nbGVDaGFydHNMb2FkZWQ6IGFueTtcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmZ1bmN0aW9uIHBhcnNlQm9vbGVhbih2YWx1ZSkge1xyXG5cclxuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHZhbHVlICE9IG51bGwgJiZcclxuICAgICAgICB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjb252ZXJ0VG9Hb29nbGVUeXBlKGNvbnRlbnRUeXBlKSB7XHJcblxyXG4gICAgbGV0IGdvb2dsZVR5cGUgPSAnc3RyaW5nJztcclxuXHJcbiAgICBpZiAoY29udGVudFR5cGUgIT0gbnVsbCkge1xyXG5cclxuICAgICAgICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50VHlwZSA9PT0gbWFueXdoby5jb21wb25lbnQuY29udGVudFR5cGVzLm51bWJlcikge1xyXG4gICAgICAgICAgICBnb29nbGVUeXBlID0gJ251bWJlcic7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnb29nbGVUeXBlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGlzcGxheUNvbHVtbnMoY29sdW1ucywgb3V0Y29tZXMpIHtcclxuXHJcbiAgICBjb25zdCBkaXNwbGF5Q29sdW1ucyA9IG1hbnl3aG8uY29tcG9uZW50LmdldERpc3BsYXlDb2x1bW5zKGNvbHVtbnMpIHx8IFtdO1xyXG5cclxuICAgIGlmIChvdXRjb21lcy5maWx0ZXIoZnVuY3Rpb24ob3V0Y29tZSkge1xyXG5cclxuICAgICAgICByZXR1cm4gIW91dGNvbWUuaXNCdWxrQWN0aW9uO1xyXG5cclxuICAgIH0pLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgZGlzcGxheUNvbHVtbnMudW5zaGlmdCgnbXctb3V0Y29tZXMnKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRpc3BsYXlDb2x1bW5zO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gYXJlQnVsa0FjdGlvbnNEZWZpbmVkKG91dGNvbWVzKSB7XHJcblxyXG4gICAgcmV0dXJuIG91dGNvbWVzLmZpbHRlcihmdW5jdGlvbihvdXRjb21lKSB7XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRjb21lLmlzQnVsa0FjdGlvbjtcclxuXHJcbiAgICB9KS5sZW5ndGggIT09IDA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJIZWFkZXIoXHJcbiAgICBzZWFyY2hWYWx1ZSwgXHJcbiAgICBvdXRjb21lcywgXHJcbiAgICBmbG93S2V5LCBcclxuICAgIGlzU2VhcmNoRW5hYmxlZCwgXHJcbiAgICBvblNlYXJjaENoYW5nZWQsIFxyXG4gICAgb25TZWFyY2hFbnRlcmVkLCBcclxuICAgIHNlYXJjaCwgXHJcbiAgICBpc09iamVjdERhdGEsIFxyXG4gICAgcmVmcmVzaCwgXHJcbiAgICBpc0Rlc2lnblRpbWUsIFxyXG4gICAgbW9kZWwsXHJcbikge1xyXG5cclxuICAgIGNvbnN0IGxvb2tVcEtleSA9IG1hbnl3aG8udXRpbHMuZ2V0TG9va1VwS2V5KGZsb3dLZXkpO1xyXG4gICAgbGV0IGhlYWRlckVsZW1lbnRzID0gW107XHJcbiAgICBsZXQgc2VhcmNoRWxlbWVudCA9IG51bGw7XHJcbiAgICBsZXQgb3V0Y29tZXNFbGVtZW50ID0gbnVsbDtcclxuICAgIGxldCByZWZyZXNoRWxlbWVudCA9IG51bGw7XHJcbiAgICBjb25zdCBtYWluRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvb2tVcEtleSk7XHJcblxyXG4gICAgaWYgKChpc09iamVjdERhdGEgJiZcclxuICAgICAgICAgbW9kZWwuYXR0cmlidXRlcyAhPSBudWxsICYmXHJcbiAgICAgICAgIHBhcnNlQm9vbGVhbihtb2RlbC5hdHRyaWJ1dGVzLmVuYWJsZVJlZnJlc2gpID09PSB0cnVlKSB8fFxyXG4gICAgICAgIChpc09iamVjdERhdGEgJiZcclxuICAgICAgICAgbW9kZWwuYXR0cmlidXRlcyA9PSBudWxsKSkge1xyXG5cclxuICAgICAgICBjb25zdCByZWZyZXNoQXR0cmlidXRlcyA9IHsgXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0biBidG4tc20gYnRuLWRlZmF1bHQgdGFibGUtcmVmcmVzaCcsIFxyXG4gICAgICAgICAgICBvbkNsaWNrOiByZWZyZXNoLFxyXG4gICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGlzRGVzaWduVGltZSkge1xyXG4gICAgICAgICAgICByZWZyZXNoQXR0cmlidXRlcy5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWZyZXNoRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHJlZnJlc2hBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLXJlZnJlc2gnIH0sIG51bGwpLFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1NlYXJjaEVuYWJsZWQpIHtcclxuXHJcbiAgICAgICAgY29uc3QgYnV0dG9uQXR0cmlidXRlcyA9IHsgXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0biBidG4tZGVmYXVsdCcsIFxyXG4gICAgICAgICAgICBvbkNsaWNrOiBzZWFyY2gsXHJcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoaXNEZXNpZ25UaW1lKSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbkF0dHJpYnV0ZXMuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VhcmNoRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnaW5wdXQtZ3JvdXAgdGFibGUtc2VhcmNoJyB9LCBbXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdmb3JtLWNvbnRyb2wnLCBcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VhcmNoVmFsdWUsIFxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VhcmNoJywgXHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IG9uU2VhcmNoQ2hhbmdlZCwgXHJcbiAgICAgICAgICAgICAgICAgICAgb25LZXlVcDogb25TZWFyY2hFbnRlcmVkLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdpbnB1dC1ncm91cC1idG4nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgYnV0dG9uQXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2gnIH0sIG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAob3V0Y29tZXMpIHtcclxuXHJcbiAgICAgICAgb3V0Y29tZXNFbGVtZW50ID0gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAndGFibGUtb3V0Y29tZXMnIH0sIG91dGNvbWVzLm1hcChmdW5jdGlvbihvdXRjb21lKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChtYW55d2hvLmNvbXBvbmVudC5nZXRCeU5hbWUoJ291dGNvbWUnKSwgeyBpZDogb3V0Y29tZS5pZCwgZmxvd0tleSB9KTtcclxuXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAobWFpbkVsZW1lbnQgJiYgbWFpbkVsZW1lbnQuY2xpZW50V2lkdGggPCA3NjgpIHtcclxuXHJcbiAgICAgICAgaGVhZGVyRWxlbWVudHMgPSBbb3V0Y29tZXNFbGVtZW50LCBzZWFyY2hFbGVtZW50LCByZWZyZXNoRWxlbWVudF07XHJcblxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgaGVhZGVyRWxlbWVudHMgPSBbcmVmcmVzaEVsZW1lbnQsIHNlYXJjaEVsZW1lbnQsIG91dGNvbWVzRWxlbWVudF07XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlmIChoZWFkZXJFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ3RhYmxlLWhlYWRlciBjbGVhcmZpeCcgfSwgaGVhZGVyRWxlbWVudHMpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckZvb3RlcihwYWdlSW5kZXgsIGhhc01vcmVSZXN1bHRzLCBvbk5leHQsIG9uUHJldiwgaXNEZXNpZ25UaW1lKSB7XHJcblxyXG4gICAgY29uc3QgZm9vdGVyRWxlbWVudHMgPSBbXTtcclxuXHJcbiAgICBpZiAocGFnZUluZGV4ID4gMSB8fCBoYXNNb3JlUmVzdWx0cykge1xyXG5cclxuICAgICAgICBmb290ZXJFbGVtZW50cy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQobWFueXdoby5jb21wb25lbnQuZ2V0QnlOYW1lKCdwYWdpbmF0aW9uJyksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhZ2VJbmRleCxcclxuICAgICAgICAgICAgICAgIGhhc01vcmVSZXN1bHRzLFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyQ2xhc3NlczogJ3B1bGwtcmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgb25OZXh0LFxyXG4gICAgICAgICAgICAgICAgb25QcmV2LFxyXG4gICAgICAgICAgICAgICAgaXNEZXNpZ25UaW1lLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICkpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZm9vdGVyRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICd0YWJsZS1mb290ZXIgY2xlYXJmaXgnIH0sIGZvb3RlckVsZW1lbnRzKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcblxyXG59XHJcblxyXG5jbGFzcyBHb29nbGVDaGFydCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4ge1xyXG5cclxuICAgIG91dGNvbWVzID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLm91dGNvbWVzID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGdvb2dsZUNoYXJ0c0xvYWRlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gTG9hZCB0aGUgVmlzdWFsaXphdGlvbiBBUEkgYW5kIHRoZSBjb3JlY2hhcnQgcGFja2FnZS5cclxuICAgICAgICAgICAgZ29vZ2xlLmNoYXJ0cy5sb2FkKCdjdXJyZW50Jywge3BhY2thZ2VzOiBbJ2NvcmVjaGFydCddfSk7XHJcbiAgICAgICAgICAgIGdvb2dsZUNoYXJ0c0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uU2VhcmNoQ2hhbmdlZChlKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzRGVzaWduVGltZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB7IHNlYXJjaDogZS50YXJnZXQudmFsdWUgfSwgdGhpcy5wcm9wcy5mbG93S2V5LCB0cnVlKTtcclxuXHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvblNlYXJjaEVudGVyKGUpIHtcclxuXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgIXRoaXMucHJvcHMuaXNEZXNpZ25UaW1lKSB7XHJcblxyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaCgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclJvd3Mob2JqZWN0RGF0YSwgb3V0Y29tZXMsIGRpc3BsYXlDb2x1bW5zKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBjb25zdCBvdXRjb21lQ29tcG9uZW50ID0gbWFueXdoby5jb21wb25lbnQuZ2V0QnlOYW1lKCdvdXRjb21lJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoYXJ0SWQgPSB0aGlzLnByb3BzLmlkO1xyXG5cclxuICAgICAgICAvLyBTZXQgYSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgR29vZ2xlIFZpc3VhbGl6YXRpb24gQVBJIGlzIGxvYWRlZC5cclxuICAgICAgICBnb29nbGUuY2hhcnRzLnNldE9uTG9hZENhbGxiYWNrKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBkYXRhIHRhYmxlLlxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkRhdGFUYWJsZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpc3BsYXlDb2x1bW5zICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlDb2x1bW5zLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpc3BsYXlDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuYWRkQ29sdW1uKGNvbnZlcnRUb0dvb2dsZVR5cGUoZGlzcGxheUNvbHVtbnNbaV0uY29udGVudFR5cGUpLCBkaXNwbGF5Q29sdW1uc1tpXS5sYWJlbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9iamVjdERhdGEgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0RGF0YS5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqZWN0RGF0YVtpXS5wcm9wZXJ0aWVzICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YVtpXS5wcm9wZXJ0aWVzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUNvbHVtbnMgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Q29sdW1ucy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3cgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZGlzcGxheUNvbHVtbnMubGVuZ3RoOyBrKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9iamVjdERhdGFbaV0ucHJvcGVydGllcy5sZW5ndGg7IGorKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGFbaV0ucHJvcGVydGllc1tqXS50eXBlRWxlbWVudFByb3BlcnR5SWQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID09PSBkaXNwbGF5Q29sdW1uc1trXS50eXBlRWxlbWVudFByb3BlcnR5SWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb252ZXJ0VG9Hb29nbGVUeXBlKGRpc3BsYXlDb2x1bW5zW2tdLmNvbnRlbnRUeXBlKSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBudW1iZXJWYWx1ZSA9IHBhcnNlRmxvYXQob2JqZWN0RGF0YVtpXS5wcm9wZXJ0aWVzW2pdLmNvbnRlbnRWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG51bWJlclZhbHVlKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlclZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dbcm93Lmxlbmd0aF0gPSBudW1iZXJWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tyb3cubGVuZ3RoXSA9IG9iamVjdERhdGFbaV0ucHJvcGVydGllc1tqXS5jb250ZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3Nbcm93cy5sZW5ndGhdID0gcm93O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRhdGEuYWRkUm93cyhyb3dzKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFNldCBjaGFydCBvcHRpb25zXHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgICAgICAgICAgICBwaWVIb2xlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgaXMzRDogbnVsbCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjaGFydCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAobW9kZWwuYXR0cmlidXRlcykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5hdHRyaWJ1dGVzLnBpZUhvbGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5waWVIb2xlID0gcGFyc2VGbG9hdChtb2RlbC5hdHRyaWJ1dGVzLnBpZUhvbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWwuYXR0cmlidXRlcy5pczNEKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaXMzRCA9IHBhcnNlQm9vbGVhbihtb2RlbC5hdHRyaWJ1dGVzLmlzM0QpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWwuYXR0cmlidXRlcy5jaGFydCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwuYXR0cmlidXRlcy5jaGFydC50b0xvd2VyQ2FzZSgpID09PSAnYW5ub3RhdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQW5ub3RhdGlvbkNoYXJ0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoYXJ0SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmF0dHJpYnV0ZXMuY2hhcnQudG9Mb3dlckNhc2UoKSA9PT0gJ2FyZWEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkFyZWFDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjaGFydElkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlbC5hdHRyaWJ1dGVzLmNoYXJ0LnRvTG93ZXJDYXNlKCkgPT09ICdiYXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkJhckNoYXJ0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoYXJ0SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmF0dHJpYnV0ZXMuY2hhcnQudG9Mb3dlckNhc2UoKSA9PT0gJ2J1YmJsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQnViYmxlQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2hhcnRJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwuYXR0cmlidXRlcy5jaGFydC50b0xvd2VyQ2FzZSgpID09PSAnY2FsZW5kYXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkNhbGVuZGFyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoYXJ0SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmF0dHJpYnV0ZXMuY2hhcnQudG9Mb3dlckNhc2UoKSA9PT0gJ2NhbmRsZXN0aWNrJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydCA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5DYW5kbGVzdGlja0NoYXJ0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoYXJ0SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmF0dHJpYnV0ZXMuY2hhcnQudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbHVtbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ29sdW1uQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2hhcnRJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwuYXR0cmlidXRlcy5jaGFydC50b0xvd2VyQ2FzZSgpID09PSAnZ2F1Z2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkdhdWdlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoYXJ0SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmF0dHJpYnV0ZXMuY2hhcnQudG9Mb3dlckNhc2UoKSA9PT0gJ2xpbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkxpbmVDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjaGFydElkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlbC5hdHRyaWJ1dGVzLmNoYXJ0LnRvTG93ZXJDYXNlKCkgPT09ICdzYW5rZXknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLlNhbmtleShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjaGFydElkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlbC5hdHRyaWJ1dGVzLmNoYXJ0LnRvTG93ZXJDYXNlKCkgPT09ICd0cmVlbWFwJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydCA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5UcmVlTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoYXJ0SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoYXJ0ID09IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjaGFydCA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5QaWVDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjaGFydElkKSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGFydC5kcmF3KGRhdGEsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgaWQ6IHRoaXMucHJvcHMuaWQgfSwgbnVsbCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHNlYXJjaCgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNEZXNpZ25UaW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHRoaXMucHJvcHMuZmxvd0tleSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKG1vZGVsLm9iamVjdERhdGFSZXF1ZXN0KSB7XHJcblxyXG4gICAgICAgICAgICBtYW55d2hvLmVuZ2luZS5vYmplY3REYXRhUmVxdWVzdChcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaWQsIG1vZGVsLm9iamVjdERhdGFSZXF1ZXN0LCBcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZmxvd0tleSwgXHJcbiAgICAgICAgICAgICAgICBtYW55d2hvLnNldHRpbmdzLmdsb2JhbCgncGFnaW5nLnRhYmxlJyksIFxyXG4gICAgICAgICAgICAgICAgc3RhdGUuc2VhcmNoLFxyXG4gICAgICAgICAgICAgICAgbnVsbCwgXHJcbiAgICAgICAgICAgICAgICBudWxsLCBcclxuICAgICAgICAgICAgICAgIHN0YXRlLnBhZ2UsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5Q29sdW1ucyA9IChtYW55d2hvLmNvbXBvbmVudC5nZXREaXNwbGF5Q29sdW1ucyhtb2RlbC5jb2x1bW5zKSB8fCBbXSkubWFwKGZ1bmN0aW9uKGNvbHVtbikge1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW4udHlwZUVsZW1lbnRQcm9wZXJ0eUlkLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YTogbW9kZWwub2JqZWN0RGF0YS5maWx0ZXIoZnVuY3Rpb24ob2JqZWN0RGF0YSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0RGF0YS5wcm9wZXJ0aWVzLmZpbHRlcihmdW5jdGlvbihwcm9wZXJ0eSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXlDb2x1bW5zLmluZGV4T2YocHJvcGVydHkudHlwZUVsZW1lbnRQcm9wZXJ0eUlkKSAhPT0gLTEgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHByb3BlcnR5LmNvbnRlbnRWYWx1ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc3RhdGUuc2VhcmNoLnRvTG93ZXJDYXNlKCkpICE9PSAtMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoID4gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzdGF0ZS5wYWdlID0gMTtcclxuICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgc3RhdGUsIHRoaXMucHJvcHMuZmxvd0tleSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVmcmVzaCgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNEZXNpZ25UaW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHsgc2VhcmNoOiAnJyB9LCB0aGlzLnByb3BzLmZsb3dLZXksIHRydWUpO1xyXG5cclxuICAgICAgICB0aGlzLnNlYXJjaCgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvblJvd0NsaWNrZWQoZSkge1xyXG5cclxuICAgICAgICBsZXQgc2VsZWN0ZWRSb3dzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFJvd3M7XHJcblxyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuXHJcbiAgICAgICAgaWYgKHNlbGVjdGVkUm93cy5pbmRleE9mKGUuY3VycmVudFRhcmdldC5pZCkgPT09IC0xKSB7XHJcblxyXG4gICAgICAgICAgICBtb2RlbC5pc011bHRpU2VsZWN0ID8gc2VsZWN0ZWRSb3dzLnB1c2goZS5jdXJyZW50VGFyZ2V0LmlkKSA6IHNlbGVjdGVkUm93cyA9IFtlLmN1cnJlbnRUYXJnZXQuaWRdO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgc2VsZWN0ZWRSb3dzLnNwbGljZShzZWxlY3RlZFJvd3MuaW5kZXhPZihlLmN1cnJlbnRUYXJnZXQuaWQpLCAxKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRSb3dzIH0pO1xyXG4gICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmlkLCBcclxuICAgICAgICAgICAgeyBvYmplY3REYXRhOiBtYW55d2hvLmNvbXBvbmVudC5nZXRTZWxlY3RlZFJvd3MobW9kZWwsIHNlbGVjdGVkUm93cykgfSwgXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZmxvd0tleSwgXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJTZWxlY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFJvd3M6IFtdIH0pO1xyXG4gICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHsgb2JqZWN0RGF0YTogW10gfSwgdGhpcy5wcm9wcy5mbG93S2V5LCB0cnVlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgb25PdXRjb21lKG9iamVjdERhdGFJZCwgb3V0Y29tZUlkKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudChcclxuICAgICAgICAgICAgbW9kZWwuaWQsIFxyXG4gICAgICAgICAgICB7IG9iamVjdERhdGE6IG1hbnl3aG8uY29tcG9uZW50LmdldFNlbGVjdGVkUm93cyhtb2RlbCwgW29iamVjdERhdGFJZF0pIH0sIFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmZsb3dLZXksIFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZsb3dLZXkgPSB0aGlzLnByb3BzLmZsb3dLZXk7XHJcbiAgICAgICAgY29uc3Qgb3V0Y29tZSA9IG1hbnl3aG8ubW9kZWwuZ2V0T3V0Y29tZShvdXRjb21lSWQsIHRoaXMucHJvcHMuZmxvd0tleSk7XHJcbiAgICAgICAgbWFueXdoby5lbmdpbmUubW92ZShvdXRjb21lLCB0aGlzLnByb3BzLmZsb3dLZXkpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvdXRjb21lLmlzT3V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uZW5naW5lLmZsb3dPdXQob3V0Y29tZSwgZmxvd0tleSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uTmV4dCgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuXHJcbiAgICAgICAgaWYgKCFzdGF0ZS5wYWdlKSB7XHJcblxyXG4gICAgICAgICAgICBzdGF0ZS5wYWdlID0gMTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0ZS5wYWdlKys7XHJcbiAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgc3RhdGUsIHRoaXMucHJvcHMuZmxvd0tleSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGlmIChtb2RlbC5vYmplY3REYXRhUmVxdWVzdCB8fCBtb2RlbC5maWxlRGF0YVJlcXVlc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2goKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmF0dHJpYnV0ZXMucGFnaW5hdGlvbiAmJiBtYW55d2hvLnV0aWxzLmlzRXF1YWwobW9kZWwuYXR0cmlidXRlcy5wYWdpbmF0aW9uLCAndHJ1ZScsIHRydWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uUHJldigpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBzdGF0ZS5wYWdlLS07XHJcblxyXG4gICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHN0YXRlLCB0aGlzLnByb3BzLmZsb3dLZXksIHRydWUpO1xyXG5cclxuICAgICAgICBpZiAobW9kZWwub2JqZWN0RGF0YVJlcXVlc3QgfHwgbW9kZWwuZmlsZURhdGFSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlbC5hdHRyaWJ1dGVzLnBhZ2luYXRpb24gJiYgbWFueXdoby51dGlscy5pc0VxdWFsKG1vZGVsLmF0dHJpYnV0ZXMucGFnaW5hdGlvbiwgJ3RydWUnLCB0cnVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRJbml0aWFsU3RhdGUoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkUm93czogW10sXHJcbiAgICAgICAgICAgIHdpbmRvd1dpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcclxuICAgICAgICAgICAgc29ydEJ5T3JkZXI6ICdBU0MnLFxyXG4gICAgICAgICAgICBsYXN0T3JkZXJCeTogJycsXHJcbiAgICAgICAgICAgIG9iamVjdERhdGE6IG51bGwsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcblxyXG4gICAgICAgIC8vIGlmIChnb29nbGVDaGFydHNMb2FkZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgLy8gICAgIC8vIExvYWQgdGhlIFZpc3VhbGl6YXRpb24gQVBJIGFuZCB0aGUgY29yZWNoYXJ0IHBhY2thZ2UuXHJcbiAgICAgICAgLy8gICAgIGdvb2dsZS5jaGFydHMubG9hZCgnY3VycmVudCcsIHtwYWNrYWdlczogWydjb3JlY2hhcnQnXX0pO1xyXG4gICAgICAgIC8vICAgICBnb29nbGVDaGFydHNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG5cclxuICAgICAgICBjb25zdCBtb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHRoaXMucHJvcHMuZmxvd0tleSk7XHJcbiAgICAgICAgaWYgKCFtb2RlbC5vYmplY3REYXRhUmVxdWVzdCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9iamVjdERhdGE6IG1vZGVsLm9iamVjdERhdGEgfSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudChuZXh0UHJvcHMuaWQsIG5leHRQcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucHJvcHMuaXNEZXNpZ25UaW1lIFxyXG4gICAgICAgICAgICA/IHsgZXJyb3I6IG51bGwsIGxvYWRpbmc6IGZhbHNlIH0gXHJcbiAgICAgICAgICAgIDogbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KSB8fCB7fTtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhbW9kZWwub2JqZWN0RGF0YVJlcXVlc3QgXHJcbiAgICAgICAgICAgICYmICFtb2RlbC5maWxlRGF0YVJlcXVlc3QgXHJcbiAgICAgICAgICAgICYmIG1hbnl3aG8udXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKHN0YXRlLnNlYXJjaCkgXHJcbiAgICAgICAgICAgICYmIChtYW55d2hvLnV0aWxzLmlzTnVsbE9yV2hpdGVzcGFjZShzdGF0ZS5wYWdlKSBcclxuICAgICAgICAgICAgICAgIHx8IHN0YXRlLnBhZ2UgPT09IDEpXHJcbiAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgb2JqZWN0RGF0YTogbW9kZWwub2JqZWN0RGF0YSB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIG1hbnl3aG8ubG9nLmluZm8oJ1JlbmRlcmluZyBHb29nbGUgQ2hhcnQ6ICcgKyB0aGlzLnByb3BzLmlkKTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wcm9wcy5pc0Rlc2lnblRpbWUgXHJcbiAgICAgICAgICAgID8geyBlcnJvcjogbnVsbCwgbG9hZGluZzogZmFsc2UgfSBcclxuICAgICAgICAgICAgOiBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpIHx8IHt9O1xyXG5cclxuICAgICAgICB0aGlzLm91dGNvbWVzID0gbWFueXdoby5tb2RlbC5nZXRPdXRjb21lcyh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG5cclxuICAgICAgICBsZXQgb2JqZWN0RGF0YSA9IHRoaXMucHJvcHMuaXNEZXNpZ25UaW1lID8gW10gOiBtb2RlbC5vYmplY3REYXRhO1xyXG5cclxuICAgICAgICBpZiAobW9kZWwub2JqZWN0RGF0YSAmJiBzdGF0ZS5vYmplY3REYXRhICYmICF0aGlzLnN0YXRlLm9iamVjdERhdGEpIHtcclxuXHJcbiAgICAgICAgICAgIG9iamVjdERhdGEgPSBtb2RlbC5vYmplY3REYXRhLm1hcChmdW5jdGlvbihtb2RlbEl0ZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZU9iamVjdERhdGEgPSBzdGF0ZS5vYmplY3REYXRhLmZpbHRlcihmdW5jdGlvbihzdGF0ZUl0ZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hbnl3aG8udXRpbHMuaXNFcXVhbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxJdGVtLmV4dGVybmFsSWQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUl0ZW0uZXh0ZXJuYWxJZCxcclxuICAgICAgICAgICAgICAgICAgICApIFxyXG4gICAgICAgICAgICAgICAgICAgICYmIG1hbnl3aG8udXRpbHMuaXNFcXVhbChtb2RlbEl0ZW0uaW50ZXJuYWxJZCwgc3RhdGVJdGVtLmludGVybmFsSWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZU9iamVjdERhdGEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hbnl3aG8udXRpbHMuZXh0ZW5kKHt9LCBbbW9kZWxJdGVtLCBzdGF0ZU9iamVjdERhdGFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWxJdGVtO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRpc3BsYXlDb2x1bW5zID0gKHRoaXMucHJvcHMuaXNEZXNpZ25UaW1lKSA/IFtdIDogZ2V0RGlzcGxheUNvbHVtbnMobW9kZWwuY29sdW1ucywgdGhpcy5vdXRjb21lcyk7XHJcbiAgICAgICAgY29uc3QgaGFzTW9yZVJlc3VsdHMgPSAoXHJcbiAgICAgICAgICAgICAgICBtb2RlbC5vYmplY3REYXRhUmVxdWVzdCBcclxuICAgICAgICAgICAgICAgICYmIG1vZGVsLm9iamVjdERhdGFSZXF1ZXN0Lmhhc01vcmVSZXN1bHRzKSBcclxuICAgICAgICAgICAgfHwgKFxyXG4gICAgICAgICAgICAgICAgbW9kZWwuZmlsZURhdGFSZXF1ZXN0IFxyXG4gICAgICAgICAgICAgICAgJiYgbW9kZWwuZmlsZURhdGFSZXF1ZXN0Lmhhc01vcmVSZXN1bHRzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IHJvd091dGNvbWVzID0gdGhpcy5vdXRjb21lcy5maWx0ZXIoZnVuY3Rpb24ob3V0Y29tZSkgeyByZXR1cm4gIW91dGNvbWUuaXNCdWxrQWN0aW9uOyB9KTtcclxuICAgICAgICBjb25zdCBoZWFkZXJPdXRjb21lcyA9IHRoaXMub3V0Y29tZXMuZmlsdGVyKGZ1bmN0aW9uKG91dGNvbWUpIHsgcmV0dXJuIG91dGNvbWUuaXNCdWxrQWN0aW9uOyB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUub2JqZWN0RGF0YSkge1xyXG4gICAgICAgICAgICBvYmplY3REYXRhID0gdGhpcy5zdGF0ZS5vYmplY3REYXRhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0YXRlLmVycm9yKSB7XHJcblxyXG4gICAgICAgICAgICBjb250ZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICd0YWJsZS1lcnJvcicgfSwgW1xyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncCcsIHsgY2xhc3NOYW1lOiAnbGVhZCcgfSwgc3RhdGUuZXJyb3IubWVzc2FnZSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IGNsYXNzTmFtZTogJ2J0biBidG4tZGFuZ2VyJywgb25DbGljazogdGhpcy5zZWFyY2ggfSwgJ1JldHJ5JyksXHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGRpc3BsYXlDb2x1bW5zLmxlbmd0aCA9PT0gMCkge1xyXG5cclxuICAgICAgICAgICAgY29udGVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAndGFibGUtZXJyb3InIH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwJywgeyBjbGFzc05hbWU6ICdsZWFkJyB9LCAnTm8gZGlzcGxheSBjb2x1bW5zIGhhdmUgYmVlbiBkZWZpbmVkIGZvciB0aGlzIHRhYmxlJyksXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBjb250ZW50ID0gdGhpcy5yZW5kZXJSb3dzKG9iamVjdERhdGEgfHwgW10sIHJvd091dGNvbWVzLCBkaXNwbGF5Q29sdW1ucyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNzc0NsYXNzZXMgPSBbXTtcclxuICAgICAgICBsZXQgY2xhc3NOYW1lcyA9ICcnO1xyXG5cclxuICAgICAgICBpZiAobW9kZWwuaXNWaXNpYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBjc3NDbGFzc2VzLnB1c2goJ2hpZGRlbicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3NzQ2xhc3NlcyA9IGNzc0NsYXNzZXMuY29uY2F0KFxyXG4gICAgICAgICAgICBtYW55d2hvLnN0eWxpbmcuZ2V0Q2xhc3Nlcyh0aGlzLnByb3BzLnBhcmVudElkLCB0aGlzLnByb3BzLmlkLCAnZ29vZ2xlLWNoYXJ0JywgdGhpcy5wcm9wcy5mbG93S2V5KSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAobW9kZWwuYXR0cmlidXRlcyAmJiBtb2RlbC5hdHRyaWJ1dGVzLmNsYXNzZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZXMgPSBjc3NDbGFzc2VzLmpvaW4oJyAnKSArICcgJyArIG1vZGVsLmF0dHJpYnV0ZXMuY2xhc3NlcztcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZXMgPSBjc3NDbGFzc2VzLmpvaW4oJyAnKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdmFsaWRhdGlvbkVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbW9kZWwuaXNWYWxpZCAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kZWwuaXNWYWxpZCA9PT0gZmFsc2UpIHtcclxuXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25FbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdoYXMtZXJyb3InIH0sIFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnaGVscC1ibG9jaycgfSwgbW9kZWwudmFsaWRhdGlvbk1lc3NhZ2UpLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChtb2RlbC5pc1Zpc2libGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZXMgKz0gJyBoaWRkZW4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzIH0sIFtcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdwYW5lbCBwYW5lbC1kZWZhdWx0JyB9LCBbXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ3BhbmVsLWhlYWRpbmcnIH0sIG1vZGVsLmxhYmVsKSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAncGFuZWwtYm9keScgfSwgWyB2YWxpZGF0aW9uRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckhlYWRlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnNlYXJjaCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJPdXRjb21lcywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmZsb3dLZXksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNTZWFyY2hhYmxlLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25TZWFyY2hDaGFuZ2VkLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25TZWFyY2hFbnRlciwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobW9kZWwub2JqZWN0RGF0YVJlcXVlc3QgfHwgbW9kZWwuZmlsZURhdGFSZXF1ZXN0KSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2gsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5pc0Rlc2lnblRpbWUsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckZvb3RlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBhZ2UgfHwgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc01vcmVSZXN1bHRzLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OZXh0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25QcmV2LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXNEZXNpZ25UaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5jb21wb25lbnQuZ2V0QnlOYW1lKCd3YWl0JyksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGU6IHN0YXRlLmxvYWRpbmcsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHN0YXRlLmxvYWRpbmcgJiYgc3RhdGUubG9hZGluZy5tZXNzYWdlLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NtYWxsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ2dvb2dsZS1jaGFydCcsIEdvb2dsZUNoYXJ0KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdvb2dsZUNoYXJ0O1xyXG4iLCJkZWNsYXJlIHZhciBtYW55d2hvOiBhbnk7XHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnLi9jc3MvYmFzaWMuY3NzJztcclxuXHJcbmNsYXNzIEN1c3RvbUJhc2ljIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiY3VzdG9tLWJhc2ljXCI+QmFzaWMgQ3VzdG9tIENvbXBvbmVudDwvZGl2PjtcclxuICAgIH1cclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ2N1c3RvbS1iYXNpYycsIEN1c3RvbUJhc2ljKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUJhc2ljO1xyXG4iLCJleHBvcnQgKiBmcm9tICcuL2Jhc2ljJztcclxuZXhwb3J0ICogZnJvbSAnLi9nb29nbGUtY2hhcnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2lucHV0JztcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==